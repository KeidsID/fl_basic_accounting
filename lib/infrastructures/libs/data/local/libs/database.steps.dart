// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    projects,
    projectTransactions,
    projectTransactionTags,
    projectTransactionTagRelations,
    idxProjects,
    idxProjectTransactions,
    idxProjectTransactionTags,
  ];
  late final Shape0 projects = Shape0(
    source: i0.VersionedTable(
      entityName: 'projects',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1, _column_2, _column_3, _column_4],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 projectTransactions = Shape1(
    source: i0.VersionedTable(
      entityName: 'project_transactions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 projectTransactionTags = Shape2(
    source: i0.VersionedTable(
      entityName: 'project_transaction_tags',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(project_id, name)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_5,
        _column_3,
        _column_4,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 projectTransactionTagRelations = Shape3(
    source: i0.VersionedTable(
      entityName: 'project_transaction_tag_relations',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(transaction_id, tag_id)'],
      columns: [_column_1, _column_2, _column_10, _column_11],
      attachedDatabase: database,
    ),
    alias: null,
  );
  final i1.Index idxProjects = i1.Index(
    'idx_projects',
    'CREATE INDEX idx_projects ON projects (name)',
  );
  final i1.Index idxProjectTransactions = i1.Index(
    'idx_project_transactions',
    'CREATE INDEX idx_project_transactions ON project_transactions (project_id, transaction_type, transaction_date)',
  );
  final i1.Index idxProjectTransactionTags = i1.Index(
    'idx_project_transaction_tags',
    'CREATE INDEX idx_project_transaction_tags ON project_transaction_tags (project_id, name)',
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'PRIMARY KEY AUTOINCREMENT',
      ),
    );
i1.GeneratedColumn<DateTime> _column_1(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'created_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression('CURRENT_TIMESTAMP'),
    );
i1.GeneratedColumn<DateTime> _column_2(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'updated_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression('CURRENT_TIMESTAMP'),
    );
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get projectId =>
      columnsByName['project_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get amount =>
      columnsByName['amount']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get transactionType =>
      columnsByName['transaction_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get transactionDate =>
      columnsByName['transaction_date']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_5(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'project_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES projects (id)',
      ),
    );
i1.GeneratedColumn<double> _column_6(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'amount',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
    );
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'transaction_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_9(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'transaction_date',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression('CURRENT_DATE'),
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get projectId =>
      columnsByName['project_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
}

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get transactionId =>
      columnsByName['transaction_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get tagId =>
      columnsByName['tag_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'transaction_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES project_transactions (id)',
      ),
    );
i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'tag_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES project_transaction_tags (id)',
      ),
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from1To2: from1To2),
);
